//time complexity O(n^2)
//space complexity O(1)
class Solution {
    public int[] twoSum(int[] nums, int target) {
        for(int i=0;i<nums.length;i++){
            for(int j=i+1;j<nums.length;j++){
                if(nums[j]==target-nums[i]){
                    return new int[]{i,j};
                }
            }
        }
        throw new IllegalArgumentException("No solution");
    }
}

//time complexity O(n)
//space complexity O(n)
class Solution {
    public int[] twoSum(int[] nums, int target) {
       Map<Integer,Integer>m=new HashMap<>();
        for(int i=0;i<nums.length;i++){
            int c=target-nums[i];
            if(m.containsKey(c)){
                return new int[]{m.get(c),i};
            }
            m.put(nums[i],i);
        }
        throw new IllegalArgumentException("no");
    }
}
